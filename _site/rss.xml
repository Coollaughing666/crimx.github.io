<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>码田寻虫</title>
        <description>码田寻虫 - Jesse Wong</description>
        <link>http://www.crimx.com</link>
        <link>http://www.crimx.com</link>
        <lastBuildDate>2014-03-21T15:14:36+08:00</lastBuildDate>
        <pubDate>2014-03-21T15:14:36+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>奇妙的位运算</title>
                <description>&lt;p&gt;今天看lcc源码内存对齐时看到一个&lt;code&gt;roundup(x,n)&lt;/code&gt;宏&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='cp'&gt;#define roundup(x,n) (((x)+((n)-1))&amp;amp;(~((n)-1)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从字面意思看这个宏应该是用来向上取整的。但是&lt;code&gt;(x+n-1)&amp;amp;(~(n-1))&lt;/code&gt;究竟是怎么做到的?&lt;/p&gt;

&lt;p&gt;这里要从头说起，首先&lt;code&gt;roundup(x,n)&lt;/code&gt;的作用是求出用最小的&lt;code&gt;an&lt;/code&gt;,使得&lt;code&gt;an&amp;gt;=x&lt;/code&gt;，即&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;an&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里就要引入小学时的余数概念了：&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;除数×商=被除数-余数&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即对于任意两个正整数&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;n&lt;/code&gt;，总存在整数&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;，使得:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = an + b (0 &amp;lt;= b &amp;lt; n)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在C语言中求&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;非常简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = x / n;
b = x % b;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，如果把&lt;code&gt;roundup(x,n)&lt;/code&gt;转换，就可以求&lt;code&gt;an&lt;/code&gt;了：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;an&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;an&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;
&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;an&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;an&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;于是：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;
&lt;span class='n'&gt;an&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里就可以算出&lt;code&gt;an&lt;/code&gt;了，但是很明显&lt;code&gt;roundup(x,n)&lt;/code&gt;在这里继续对公式进行优化。&lt;/p&gt;

&lt;p&gt;因为&lt;code&gt;n&lt;/code&gt;是内存块的单位，一定是&lt;code&gt;2&lt;/code&gt;的幂，于是有如下的特性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;设&lt;code&gt;n = 2^m&lt;/code&gt;，则&lt;code&gt;m = n - 1&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;n&lt;/code&gt;的二进制必然是&lt;code&gt;100...&lt;/code&gt;的形态，其中有&lt;code&gt;m&lt;/code&gt;个&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;对于&lt;code&gt;n&lt;/code&gt;的乘除操作，可以用左移右移完成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以看回算式&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;an&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看作是&lt;code&gt;(x+n-1)&lt;/code&gt;右移&lt;code&gt;m&lt;/code&gt;个位，在左移&lt;code&gt;m&lt;/code&gt;个位，也就是把最低的&lt;code&gt;m&lt;/code&gt;个位清零就可以了。&lt;/p&gt;

&lt;p&gt;而从上面的属性可以知道，&lt;code&gt;n-1&lt;/code&gt;的二进制必然是&lt;code&gt;111...&lt;/code&gt;的形态，其中有&lt;code&gt;m&lt;/code&gt;个&lt;code&gt;1&lt;/code&gt;，所以清零只要对&lt;code&gt;m&lt;/code&gt;的反码进行与操作就可以了。&lt;/p&gt;

&lt;p&gt;于是&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;an&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;~&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多么优美的一行代码，虽然可读性不高，但是理解了之后心中还是会产生无比的敬仰，这就是编程的魔力啊，就像在翻阅前人写的一篇篇诗歌。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href='http://creativecommons.org/licenses/by-nc-sa/3.0/cn/' rel='license'&gt;&lt;img align='center' alt='知识共享许可协议' src='/assets/files/cc-licenses.png' style='border-width:0' /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a href='http://creativecommons.org/licenses/by-nc-sa/3.0/cn/' rel='license'&gt;知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;</description>
                <link>http://www.crimx.com/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2014/03/21/lcc-source-learning</link>
                <guid>http://www.crimx.com/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2014/03/21/lcc-source-learning</guid>
                <pubDate>2014-03-21T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Jekyll-bootstrap Not Updating Problem Fixed</title>
                <description>&lt;p&gt;I had a jekyll blog on the github and changed it to Jekyll-bootstrap yesterday. &lt;br /&gt;I tested it locally, everything was ok. Pushed successfully. But my github pages didn’t change.&lt;/p&gt;

&lt;p&gt;After debugging, I realised that the problem occured right after the theme &lt;code&gt;hooligan&lt;/code&gt; was installed.&lt;/p&gt;

&lt;p&gt;To fix this problem, you only need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove the &lt;code&gt;_theme_packages&lt;/code&gt; file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;git rm _theme_packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;.gitignore&lt;/code&gt; file in the root of your Page repository.&lt;/li&gt;

&lt;li&gt;Put &lt;code&gt;_theme_packages/*&lt;/code&gt; into the file.&lt;/li&gt;

&lt;li&gt;Better install the theme again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This solution worked for me.&lt;/p&gt;

&lt;p&gt;我昨天把jekyll换成了jekyll-bootstrap，在本地测试成功，push也成功了。但是github pages一直没有改变。&lt;br /&gt;重复安装了很多次，终于发现当我安装完&lt;code&gt;hooligan&lt;/code&gt;主题后，github pages就没反映了。最后发现是主题下载包&lt;code&gt;_theme_packages&lt;/code&gt;跟github有冲突。&lt;/p&gt;

&lt;p&gt;所以，先remove掉&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;git rm _theme_packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在根目录添加&lt;code&gt;.gitignore&lt;/code&gt;文件，写入&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;_theme_packages/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最好把主题重新安装一次&lt;/p&gt;

&lt;p&gt;如果上面的办法没用的话，我建议删掉仓库重新来一遍，我就是这样成功的，注意发布之后有可能要等一会才有效哦。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href='http://creativecommons.org/licenses/by-nc-sa/3.0/cn/' rel='license'&gt;&lt;img align='center' alt='知识共享许可协议' src='/assets/files/cc-licenses.png' style='border-width:0' /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a href='http://creativecommons.org/licenses/by-nc-sa/3.0/cn/' rel='license'&gt;知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;</description>
                <link>http://www.crimx.com/jekyll/2014/03/19/jekyll-bootstrap-not-updating</link>
                <guid>http://www.crimx.com/jekyll/2014/03/19/jekyll-bootstrap-not-updating</guid>
                <pubDate>2014-03-19T12:10:51Z</pubDate>
        </item>

        <item>
                <title>NFA与DFA的转换与优化</title>
                <description>&lt;p&gt;上一节《编译原理》课讲到了NFA（不确定的有穷自动机）向DFA（确定的有穷自动机）转换。考试要考，所以要手写变换过程，很繁琐，也很有趣。所以周末用python给实现了，并利用动态规划进行优化。&lt;/p&gt;

&lt;h2 id=&quot;&quot;&gt;转换方法&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;这里主要涉及到对状态集合I的两个操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;求ε-闭包。表示为ε-closure(I)，是指I中的任何状态S经过任意条ε弧能到达的状态的集合。&lt;/li&gt;

&lt;li&gt;求I的α弧转换。表示为move(I,α)，是指I中某一状态经过一条α弧到达的状态的集合。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;比如说这里有一个NFA N：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/files/2014-3-16-nfa-to-dfa/nfa.jpg&quot; alt=&quot;NFA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为NFA是一个五元组，N=(K,E,f,S,Z),即为(状态集合，弧集合，转换集合，开始状态集合，终结状态集合)，所以由图可知：&lt;/p&gt;

&lt;p&gt;NFA N = ({0,1,2,3,4,5,6,7,8,9,10},{a,b},f,{0},{10})，其中&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;f(0,ε) = {1}&lt;/li&gt;

&lt;li&gt;f(1,ε) = {2,4}&lt;/li&gt;

&lt;li&gt;f(2,a) = {3}&lt;/li&gt;

&lt;li&gt;f(3,ε) = {6}&lt;/li&gt;

&lt;li&gt;f(4,b) = {5}&lt;/li&gt;

&lt;li&gt;f(5,ε) = {6}&lt;/li&gt;

&lt;li&gt;f(6,ε) = {1,7}&lt;/li&gt;

&lt;li&gt;f{7,a} = {8}&lt;/li&gt;

&lt;li&gt;f(8,b) = {9}&lt;/li&gt;

&lt;li&gt;f(9,b) = {10}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么ε-closure(0)={0,1,2,4,7}&lt;/p&gt;

&lt;p&gt;move({0,1,2,4,7},a) = {3,8}&lt;/p&gt;

&lt;p&gt;ε-closure({3,8})={1,2,3,4,6,7,8}&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;可以借助表格来观察整个求解过程，每次求解后如果产生新集合，就会记录下来继续算，直到没有新集合为止。&lt;/p&gt;
&lt;table class='table table-bordered table-striped table-condensed'&gt;
   &lt;thead&gt;
      &lt;th&gt;T&lt;/th&gt;
      &lt;th&gt;A=&amp;#949;-closure(move(T,a))&lt;/th&gt;
      &lt;th&gt;B=&amp;#949;-closure(move(T,b))&lt;/th&gt;
   &lt;/thead&gt;
   &lt;tr&gt;
      &lt;td&gt;&amp;#949;-closure(s)={0,1,2,4,7}=T0&lt;/td&gt;
      &lt;td&gt;{1,2,3,4,6,7,8}=T1&lt;/td&gt;
      &lt;td&gt;{1,2,4,5,6,7}=T2&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;T1&lt;/td&gt;
      &lt;td&gt;T1&lt;/td&gt;
      &lt;td&gt;{1,2,4,5,6,7,9}=T3&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;T2&lt;/td&gt;
      &lt;td&gt;T1&lt;/td&gt;
      &lt;td&gt;T2&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;T3&lt;/td&gt;
      &lt;td&gt;T1&lt;/td&gt;
      &lt;td&gt;{1,2,4,5,6,7,10}=T4&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;T4&lt;/td&gt;
      &lt;td&gt;T1&lt;/td&gt;
      &lt;td&gt;T2&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;此时T列下的集合{T0,T1,T2,T3,T4}就是DFA的状态，其中含有NFA初始状态的集合为DFA的初始状态（{T0}），含有NFA终结状态的集合为DFA的终结状态（{T4}）。&lt;/p&gt;

&lt;p&gt;所以由NFA转换后的DFA为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/files/2014-3-16-nfa-to-dfa/dfa.jpg&quot; alt=&quot;DFA&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;_2&quot;&gt;实现&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;首先是数据存储格式，使用json存储NFA的五元组：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='json'&gt;&lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nt'&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;6&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;8&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;9&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
	&lt;span class='nt'&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
	&lt;span class='nt'&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='nt'&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt;
		&lt;span class='nt'&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt;
		&lt;span class='nt'&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt;
		&lt;span class='nt'&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;6&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt;
		&lt;span class='nt'&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt;
		&lt;span class='nt'&gt;&amp;quot;5&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;6&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt;
		&lt;span class='nt'&gt;&amp;quot;6&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt;
		&lt;span class='nt'&gt;&amp;quot;7&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;8&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt;
		&lt;span class='nt'&gt;&amp;quot;8&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;9&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt;
		&lt;span class='nt'&gt;&amp;quot;9&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
		&lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='p'&gt;},&lt;/span&gt;
	&lt;span class='nt'&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
	&lt;span class='nt'&gt;&amp;quot;z&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读入时做了一些简单的判断，其实还可以做得更加周全，比如初始集s和终结集z是否被状态集k包含，等等。&lt;code&gt;read()&lt;/code&gt;了之后就会把五元组包装返回。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;input&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
	&lt;span class='k'&gt;try&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
		&lt;span class='n'&gt;nfa&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;json&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;load&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;input&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
		&lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;nfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]:&lt;/span&gt;
			&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;nfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]:&lt;/span&gt;
				&lt;span class='k'&gt;raise&lt;/span&gt; &lt;span class='ne'&gt;Exception&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Set f contains iterms that not belongs to set k.&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
			&lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;nfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]:&lt;/span&gt;
				&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;nfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
					&lt;span class='k'&gt;raise&lt;/span&gt; &lt;span class='ne'&gt;Exception&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Set f contains iterms that not belongs to set e.&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
		&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;nfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]),&lt;/span&gt; &lt;span class='nb'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;nfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]),&lt;/span&gt; &lt;span class='n'&gt;nfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nb'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;nfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]),&lt;/span&gt; &lt;span class='nb'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;nfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt;
	&lt;span class='k'&gt;except&lt;/span&gt; &lt;span class='ne'&gt;IOError&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
		&lt;span class='k'&gt;print&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;File no found!&amp;quot;&lt;/span&gt;
		&lt;span class='n'&gt;sys&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='k'&gt;except&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ne'&gt;KeyError&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ne'&gt;TypeError&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
		&lt;span class='k'&gt;print&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Input data error!&amp;quot;&lt;/span&gt;
		&lt;span class='n'&gt;sys&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='k'&gt;except&lt;/span&gt; &lt;span class='ne'&gt;Exception&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
		&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;args&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt;
		&lt;span class='n'&gt;sys&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;code&gt;creat_memo()&lt;/code&gt;接下来为计算创建缓存，因为计算闭包有大量的重复计算。&lt;code&gt;memo&lt;/code&gt;是一个字典，以e集合（弧集合）的元素为键，每一个键对应的值也是一个字典，在计算闭包的过程中缓存该状态的闭包。（见&lt;code&gt;closure()&lt;/code&gt;）&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;creat_memo&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;e_set&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
	&lt;span class='n'&gt;memo&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{}&lt;/span&gt;
	&lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;e_set&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
		&lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{}&lt;/span&gt;
	&lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{}&lt;/span&gt;
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从文章开始时提到的转换方法很容易可以看到，两个操作有很大的相似性，所以我把它们封装成一个函数&lt;code&gt;closure()&lt;/code&gt;了，调用时使用各自的接口。对应上面提到的弧转换操作，&lt;code&gt;move()&lt;/code&gt;中的参数s和arc表示求move(s,arc)，而&lt;code&gt;ph_closure()&lt;/code&gt;的arc默认为ε，这里用&lt;code&gt;&amp;quot;#&amp;quot;&lt;/code&gt;表示。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;move&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;arc&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;closure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;arc&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;arc&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;ep_closure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;closure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;closure()&lt;/code&gt;是本程序的核心部分，当它接受了一个集合&lt;code&gt;c_set&lt;/code&gt;时，会对&lt;code&gt;c_set&lt;/code&gt;中的元素一一进行求闭包或者弧转换，再合并集合。在进行计算之前先查看缓存&lt;code&gt;memo&lt;/code&gt;，看看之前有没有计算过，有就直接合并，没有就先计算出结果，在&lt;code&gt;memo&lt;/code&gt;记录之后再进行合并。对于求闭包，因为是ε，所以每次要先包含本身，而弧转换则不需要。&lt;/p&gt;

&lt;p&gt;注意&lt;code&gt;memo[s] = set([s])&lt;/code&gt;，必须是&lt;code&gt;set([s])&lt;/code&gt;不能是&lt;code&gt;set(s)&lt;/code&gt;,因为&lt;code&gt;s&lt;/code&gt;为字符串，&lt;code&gt;set(s)&lt;/code&gt;会把&lt;code&gt;s&lt;/code&gt;中的每个字符都拆开。&lt;/p&gt;

&lt;p&gt;接下来判断f转换中是否存在有关f(s,arc)的定义，存在的话：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;闭包情况：深度优先递归的计算集合f(s,arc)的闭包，将它们合并回来。比如上面的NFA例子，一开始求ε-closure(0)的时候，发现f(0,ε)={1,7}，所以继续计算ε-closure(1)和ε-closure(7)。…..一直计算到尽头。每次递归计算过程中也会在&lt;code&gt;memo&lt;/code&gt;上记录，所以整个计算过程会越来越快。&lt;/li&gt;

&lt;li&gt;弧转换情况：由于弧只需要判断状态&lt;code&gt;s&lt;/code&gt;的下个一个&lt;code&gt;arc&lt;/code&gt;弧连接的状态，所以不需要递归，直接得出结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;closure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;c_set&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;arc&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
	&lt;span class='n'&gt;res&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;set&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
	&lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;c_set&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
		&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
			&lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;set&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
			&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;arc&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
				&lt;span class='c'&gt;#Attention here. Has to be a list&lt;/span&gt;
				&lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;set&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt;
			&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
				&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;arc&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;]:&lt;/span&gt;
					&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;arc&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
						&lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;|=&lt;/span&gt; &lt;span class='n'&gt;closure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;arc&lt;/span&gt;&lt;span class='p'&gt;]),&lt;/span&gt; &lt;span class='n'&gt;arc&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
					&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
						&lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;arc&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt;
		&lt;span class='n'&gt;res&lt;/span&gt; &lt;span class='o'&gt;|=&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;res&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;creat_dfa&lt;/code&gt;返回一个空的dfa结构，&lt;code&gt;calc_dfa&lt;/code&gt;代表了上面提到的表格的运算过程，并把表格的内容保存到dfa结构中。先对初始状态集k求闭包，接下来为每个弧求弧转换闭包ε-closure(move(s, arc))。出现新集合就交给&lt;code&gt;queue&lt;/code&gt;队列，并在&lt;code&gt;dfa[&amp;quot;k&amp;quot;]&lt;/code&gt;中做记录。我这里是利用集合在&lt;code&gt;dfa[&amp;quot;k&amp;quot;]&lt;/code&gt;中的index作为dfa状态的命名。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;creat_dfa&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;e_set&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
	&lt;span class='n'&gt;dfa&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{}&lt;/span&gt;
	&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;
	&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;list&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;e_set&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{}&lt;/span&gt;
	&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;
	&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;dfa&lt;/span&gt;

&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;calc_dfa&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;k_set&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;e_set&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;s_set&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;z_set&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
	&lt;span class='n'&gt;dfa&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;creat_dfa&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;e_set&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='n'&gt;dfa_set&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;
	&lt;span class='n'&gt;memo&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;creat_memo&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;e_set&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='n'&gt;ep&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;ep_closure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;s_set&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='c'&gt;#Attention here. Has to be a list&lt;/span&gt;
	&lt;span class='n'&gt;queue&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;deque&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='n'&gt;ep&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt;

	&lt;span class='n'&gt;dfa_set&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='n'&gt;ep&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt;
	&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='nb'&gt;len&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;ep&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;z_set&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
		&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;

	&lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='n'&gt;queue&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
		&lt;span class='n'&gt;T&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;queue&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;popleft&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
		&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;
		&lt;span class='n'&gt;index&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;str&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
		&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
		&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;index&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{}&lt;/span&gt;
		&lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;e_set&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
			&lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;ep_closure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;move&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;memo&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;T&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
			&lt;span class='k'&gt;try&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
				&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;str&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dfa_set&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;index&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
			&lt;span class='k'&gt;except&lt;/span&gt; &lt;span class='ne'&gt;ValueError&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
				&lt;span class='n'&gt;queue&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
				&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;str&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;len&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dfa_set&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
				&lt;span class='n'&gt;dfa_set&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
				&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
			&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;index&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;
			&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='nb'&gt;len&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;s_set&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
				&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
			&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='nb'&gt;len&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;z_set&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
				&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;dfa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成json的&lt;code&gt;write_dfa&lt;/code&gt;和程序的其余代码：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;write_dfa&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
	&lt;span class='n'&gt;f&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;json&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;dumps&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
	&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;close&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;

&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;main&lt;/span&gt;&lt;span class='p'&gt;():&lt;/span&gt;
	&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;k_set&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;e_set&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;s_set&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;z_set&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;NFA.json&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='n'&gt;dfa&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;calc_dfa&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;k_set&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;e_set&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;s_set&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;z_set&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='n'&gt;write_dfa&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dfa&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;DFA.json&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	

&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;__name__&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;__ma&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;附上最后生成的json代码，就是上面的图DFA M&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='json'&gt;&lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nt'&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
	&lt;span class='nt'&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
	&lt;span class='nt'&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
	&lt;span class='nt'&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
	&lt;span class='nt'&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='nt'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
			&lt;span class='nt'&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;3&amp;quot;&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt; 
		&lt;span class='nt'&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
			&lt;span class='nt'&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt; 
		&lt;span class='nt'&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
			&lt;span class='nt'&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;4&amp;quot;&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt; 
		&lt;span class='nt'&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
			&lt;span class='nt'&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
		&lt;span class='p'&gt;},&lt;/span&gt; 
		&lt;span class='nt'&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nt'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
			&lt;span class='nt'&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
		&lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href='http://creativecommons.org/licenses/by-nc-sa/3.0/cn/' rel='license'&gt;&lt;img align='center' alt='知识共享许可协议' src='/assets/files/cc-licenses.png' style='border-width:0' /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a href='http://creativecommons.org/licenses/by-nc-sa/3.0/cn/' rel='license'&gt;知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;</description>
                <link>http://www.crimx.com/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2014/03/16/nfa-to-dfa</link>
                <guid>http://www.crimx.com/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2014/03/16/nfa-to-dfa</guid>
                <pubDate>2014-03-16T02:38:56Z</pubDate>
        </item>

        <item>
                <title>编译原理与计算器</title>
                <description>&lt;p&gt;上次交流会师弟演讲了栈式计算器，这在《数据结构》里也有提到，当时是用C实现了。而这学期学《编译原理》，里面也涉及到数学表达式。两者对比用栈更快，但是使用中间代码可以使到条理更清晰，还可以做很多有趣的扩展。所以这次交流会的内容有着落了。&lt;/p&gt;

&lt;p&gt;因为想顺便做个简单的GUI看看效果，所以打算用Qt或pyQt，但是之前重装了系统，去下载Qt校园网速又渣渣，省事点还是用Java好了。&lt;/p&gt;

&lt;h2 id=&quot;&quot;&gt;语法图&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;先简单的递归定义数学表达式&lt;code&gt;文法&lt;/code&gt;，用&lt;code&gt;EBNF&lt;/code&gt;会比较精炼，但是演讲效果不够图像明显。&lt;/p&gt;

&lt;h3 id=&quot;_2&quot;&gt;表达式：&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/files/2014-3-15-simple-calculator/expression.png&quot; alt=&quot;expression&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_3&quot;&gt;项：&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/files/2014-3-15-simple-calculator/term.png&quot; alt=&quot;term&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_4&quot;&gt;因子：&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/files/2014-3-15-simple-calculator/factor.png&quot; alt=&quot;factor&quot; /&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3 id=&quot;_5&quot;&gt;数字&lt;/h3&gt;

&lt;p&gt;这把所有的数字当做自然数处理：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/files/2014-3-15-simple-calculator/number.png&quot; alt=&quot;number&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/files/2014-3-15-simple-calculator/integer.png&quot; alt=&quot;integer&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;_6&quot;&gt;嵌套关系&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;有了语法图就可以从字符串中把一个个有意义的符号（Token）取出来了。&lt;/p&gt;

&lt;p&gt;现在就要关注在上面的语法图中如何嵌套调用去解析一条数学表达式。&lt;/p&gt;

&lt;p&gt;比如要解析&lt;code&gt;25+3/(43-33)-37&lt;/code&gt;，如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/files/2014-3-15-simple-calculator/nest.png&quot; alt=&quot;nest&quot; /&gt;&lt;/p&gt;

&lt;p&gt;结合之前的语法图会比较好理解，我在&lt;a href=&quot;/assets/files/2014-3-15-simple-calculator/files/calculator.ppt&quot;&gt;PPT&lt;/a&gt;上做了&lt;code&gt;动态图&lt;/code&gt;。可以看到，每次都从表达式中递归的判断到&lt;code&gt;终结符&lt;/code&gt;，扫描一遍就可以建立中间代码了。&lt;/p&gt;

&lt;h2 id=&quot;_7&quot;&gt;中间代码&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;按照数学运算法则建立中间代码，它是一棵树，叶子结点都是数字，越接近根部的点运算优先级越低。&lt;/p&gt;

&lt;p&gt;举例来说，解析&lt;code&gt;-25+3/(43-33)-(-37)&lt;/code&gt;生成的中间代码如图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/files/2014-3-15-simple-calculator/ast.png&quot; alt=&quot;ast&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以结合&lt;a href=&quot;/assets/files/2014-3-15-simple-calculator/files/calculator.ppt&quot;&gt;PPT&lt;/a&gt;的动态图理解整个建立过程。扫描的时候，树根为数字遇到操作符便往上方长树，树根为操作符遇到更低优先级的操作符也往上长树，其它情况则往下长。&lt;/p&gt;

&lt;h2 id=&quot;_8&quot;&gt;代码实现&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;太懒没弄UML图，不过类也不多，直接讲吧，完整源码在&lt;a href=&quot;/assets/files/2014-3-15-simple-calculator/files/calc.tar.gz&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;首先是&lt;code&gt;Token&lt;/code&gt;类，扫描时就会将字符串生成一个个&lt;code&gt;Token&lt;/code&gt;。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='kd'&gt;private&lt;/span&gt; &lt;span class='n'&gt;TokenType&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// 该token的类型&lt;/span&gt;
&lt;span class='kd'&gt;private&lt;/span&gt; &lt;span class='kt'&gt;double&lt;/span&gt; &lt;span class='n'&gt;number&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;  &lt;span class='c1'&gt;// 数字&lt;/span&gt;
&lt;span class='kd'&gt;private&lt;/span&gt; &lt;span class='n'&gt;String&lt;/span&gt; &lt;span class='n'&gt;op&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;      &lt;span class='c1'&gt;// 操作符&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我这里是图省事把&lt;code&gt;Token&lt;/code&gt;也当做中间代码的结点，所以里面还实现树相关的属性和方法，为中间代码的结点单独设计类会更好。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='kd'&gt;private&lt;/span&gt; &lt;span class='n'&gt;ArrayList&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;Token&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;children&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// 孩子&lt;/span&gt;

&lt;span class='kd'&gt;public&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;addChild&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Token&lt;/span&gt; &lt;span class='n'&gt;token&lt;/span&gt;&lt;span class='o'&gt;){......}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来看&lt;code&gt;TokenType&lt;/code&gt;类，这里枚举了所有可能的类型。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='kd'&gt;public&lt;/span&gt; &lt;span class='kd'&gt;enum&lt;/span&gt; &lt;span class='n'&gt;TokenType&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
	
	&lt;span class='c1'&gt;//数字&lt;/span&gt;
	&lt;span class='n'&gt;NUMBER&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
	
	&lt;span class='c1'&gt;//操作符&lt;/span&gt;
	&lt;span class='n'&gt;PLUS&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;MINUS&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;STAR&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;SLASH&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
	&lt;span class='n'&gt;LEFT_PAREN&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;RIGHT_PAREN&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    
	&lt;span class='c1'&gt;//负数&lt;/span&gt;
	&lt;span class='n'&gt;NEGATE&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
	
	&lt;span class='c1'&gt;//结束&lt;/span&gt;
	&lt;span class='n'&gt;EOF&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了&lt;code&gt;Token&lt;/code&gt;和&lt;code&gt;TokenType&lt;/code&gt;，&lt;code&gt;Scanner&lt;/code&gt;类负责扫描一遍表达式并提取一个个&lt;code&gt;Token&lt;/code&gt;。因为这里的符号（Token）只有数字与负号（见上面的&lt;code&gt;TokenType&lt;/code&gt;），所以判断起来并不复杂，注意一下处理小数点。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='c1'&gt;// 数字处理&lt;/span&gt;
&lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Character&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;isDigit&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;currentChar&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='n'&gt;currentChar&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nf'&gt;extractNumber&lt;/span&gt;&lt;span class='o'&gt;();&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
	&lt;span class='n'&gt;nextChar&lt;/span&gt;&lt;span class='o'&gt;();&lt;/span&gt; &lt;span class='c1'&gt;// 先消耗掉这个字符&lt;/span&gt;
	&lt;span class='k'&gt;switch&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;currentChar&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
	&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Token&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;PLUS&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt; 
	&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Token&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;MINUS&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt; 
	&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Token&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;STAR&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
	&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Token&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;SLASH&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt; 
	&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Token&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;LEFT_PAREN&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt; 
	&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Token&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;RIGHT_PAREN&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;  
	&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Token&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;EOF&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt; 
	&lt;span class='k'&gt;default&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Exception&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;有未识别的字符 \&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;currentChar&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;\&amp;quot; !&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parser&lt;/code&gt;类就完全是对应着上面的语法图去实现了，遇到&lt;code&gt;非终结符&lt;/code&gt;便递归，逻辑非常清晰，可以参看&lt;a href=&quot;/assets/files/2014-3-15-simple-calculator/files/calc.tar.gz&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;生成中间代码后，在后端实现一个&lt;code&gt;Calculator&lt;/code&gt;去计算中间代码，更加简单，自上往下递归计算即可。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='kd'&gt;private&lt;/span&gt; &lt;span class='kt'&gt;double&lt;/span&gt; &lt;span class='nf'&gt;calculate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Token&lt;/span&gt; &lt;span class='n'&gt;token&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='kd'&gt;throws&lt;/span&gt; &lt;span class='n'&gt;Exception&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
	
	&lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;token&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
		&lt;span class='n'&gt;ArrayList&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;Token&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;children&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;token&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;getChildren&lt;/span&gt;&lt;span class='o'&gt;();&lt;/span&gt;
		&lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;children&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
			&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;token&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;getNumber&lt;/span&gt;&lt;span class='o'&gt;();&lt;/span&gt;
		&lt;span class='o'&gt;}&lt;/span&gt;
		&lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
			&lt;span class='k'&gt;switch&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;token&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;getType&lt;/span&gt;&lt;span class='o'&gt;())&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
			&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;PLUS&lt;/span&gt;   &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;calculate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;calculate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;));&lt;/span&gt;
			&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;MINUS&lt;/span&gt;  &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;calculate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;calculate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;));&lt;/span&gt;
			&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;STAR&lt;/span&gt;   &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;calculate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;calculate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;));&lt;/span&gt;
			&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;SLASH&lt;/span&gt;  &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;calculate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='n'&gt;calculate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;));&lt;/span&gt;
			&lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;NEGATE&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;calculate&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;children&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;get&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;));&lt;/span&gt;
			&lt;span class='k'&gt;default&lt;/span&gt;     &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Exception&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;计算出错！&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;token&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;getType&lt;/span&gt;&lt;span class='o'&gt;().&lt;/span&gt;&lt;span class='na'&gt;toString&lt;/span&gt;&lt;span class='o'&gt;());&lt;/span&gt;
			&lt;span class='o'&gt;}&lt;/span&gt;
		&lt;span class='o'&gt;}&lt;/span&gt;
	&lt;span class='o'&gt;}&lt;/span&gt;
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就这样表达式计算就完成了。用&lt;code&gt;CalcMachine&lt;/code&gt;类测试效果。&lt;/p&gt;

&lt;p&gt;其中使用正则表达式隐藏异常中不必要的信息。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='n'&gt;Pattern&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;compile&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;^.*Exception:&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;).&lt;/span&gt;&lt;span class='na'&gt;matcher&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;e1&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;toString&lt;/span&gt;&lt;span class='o'&gt;()).&lt;/span&gt;&lt;span class='na'&gt;replaceAll&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_9&quot;&gt;总结&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;希望大家读完这篇文章后：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;学会了理解语法图&lt;/li&gt;

&lt;li&gt;学会了简单的词法分析和语法分析&lt;/li&gt;

&lt;li&gt;使用递归可以十分灵活、方便&lt;/li&gt;

&lt;li&gt;计算器的功能很容易扩展&lt;/li&gt;

&lt;li&gt;功能分块可单独测试，便于查错、维护，特别是对于此类逻辑复杂的系统&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href='http://creativecommons.org/licenses/by-nc-sa/3.0/cn/' rel='license'&gt;&lt;img align='center' alt='知识共享许可协议' src='/assets/files/cc-licenses.png' style='border-width:0' /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a href='http://creativecommons.org/licenses/by-nc-sa/3.0/cn/' rel='license'&gt;知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;</description>
                <link>http://www.crimx.com/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2014/03/12/simple-calculator</link>
                <guid>http://www.crimx.com/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2014/03/12/simple-calculator</guid>
                <pubDate>2014-03-12T09:43:32Z</pubDate>
        </item>


</channel>
</rss>
